ssh -T git@github.com  链接github远端的仓库

git clone git@github.com:用户名/仓库名.git  将远端仓库拷贝至本地仓库

cd 仓库名   本地进入仓库

git status                                 查看当前状态
git add                                    文件名   git add命令将文件加入暂存区
git commit -m ''提交说明'      通过git commit命令提交给本地仓库
git push                                  执行push后GitHub上的仓库就会被更新
git log                                     通过git log命令查看提交日志
git log --pretty=short            只让程序显示第一行简述信息
git log 目录/文件名               git log命令后加上目录名，便会只显示该目录下的日志。如果加的是文件名，就会只显示与该文件相关的日志
git log -p                                想查看提交所带来的改动，可以加上-p参数，文件的前后差别就会显示在提交信息之后
git log -p 文件名
git diff                                      git diff命令可以查看工作树、暂存区、最新提交之间的差别
git log --graph                       以图表形式查看分支
git diff HEAD                           查看工作树和最新提交的差别
git branch                                可以将分支名列表显示，同时可以确认当前所在分支
git checkout -b                       创建、切换分支
git check -                              切换回上一个分支
git merge   --no-ff  分支名（feature-A）                            合并分支
mkdir 仓库名
cd 仓库名
git init                                    使用g i t init命令进行初始化的,如果初始化成功，执行了git init命令的目录下就会生成．git目录。这个．git目录里存储着管理当前目录内容所需的仓库数据

删除本地仓库的步骤 1、rm -rf  .git        需要删除仓库文件夹下隐藏的 .git 文件夹
2、rm -rf 本地仓库名                             删除git之后 再去删除本地的库文件夹

touch README.md                            建立README.md文件

git reset --hard 提供目标时间点的哈希值           让仓库的HEAD、暂存区、当前工作树回溯到指定状态，需要用到git reset --hard命令。只要提供目标时间点的哈希值[插图]，就可以完全恢复至该时间点的状态
git reflog                   查看当前仓库执行过的操作的日志。在日志中找出回溯历史之前的哈希值，通过gitreset --hard命令恢复到回溯历史前的状态。（git log命令只能查看以当前状态为终点的历史日志）
git commit --amend                            要修改上一条提交信息，可以使用git commit --amend命令
git rebase -i                         在合并特性分支之前，如果发现已提交的内容中有些许拼写错误等，不妨提交一个修改，然后将这个修改包含到前一个提交之中，压缩成一个历史记录。
git commit -am                                用git commit -am命令来一次完成先执行git add命令再执行git commit命令的操作。
git remote add git@github.com：用户名 /仓库名                              添加远程仓库
git push -u origin master                             将当前分支下本地仓库中的内容推送给远程仓库，需要用到git push命令。当前分支的内容就会被推送给远程仓库origin的master分支。-u参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的upstream（上游）。添加了这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从origin的master分支获取内容，省去了另外添加参数的麻烦
git push -u origin feature-D                   在本地仓库中创建了feature-D分支，现在将它push给远程仓库并保持分支名称不变。
git brach -a                                             用git branch -a命令查看当前分支的相关信息。添加 -a参数可以同时显示本地仓库和远程仓库的分支信息
git pull origin 分支名                               远程仓库的feature-D分支中已经有了我们刚刚推送的提交，使用git pull命令，将本地的feature-D分支更新到最新状态





